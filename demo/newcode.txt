let local_exports = null;
function wasmProfiler() {
	if (local_exports != null && typeof local_exports._resetInstCounters === "function") {
		var addCountLo = new Uint32Array(1);
		var andCountLo = new Uint32Array(1);
		var shlCountLo = new Uint32Array(1);
		var shrCountLo = new Uint32Array(1);
		var xorCountLo = new Uint32Array(1);
		var addCountHi = new Uint32Array(1);
		var andCountHi = new Uint32Array(1);
		var shlCountHi = new Uint32Array(1);
		var shrCountHi = new Uint32Array(1);
		var xorCountHi = new Uint32Array(1);
		var addCount = new Uint32Array(1);
		var andCount = new Uint32Array(1);
		var shlCount = new Uint32Array(1);
		var shrCount = new Uint32Array(1);
		var xorCount = new Uint32Array(1);
			
		addCountLo[0] = local_exports._getI32AddCountLo();
		andCountLo[0] = local_exports._getI32AndCountLo();
		shlCountLo[0] = local_exports._getI32ShlCountLo();
		shrCountLo[0] = local_exports._getI32ShruCountLo();
		xorCountLo[0] = local_exports._getI32XorCountLo();
		addCountHi[0] = local_exports._getI32AddCountHi();
		andCountHi[0] = local_exports._getI32AndCountHi();
		shlCountHi[0] = local_exports._getI32ShlCountHi();
		shrCountHi[0] = local_exports._getI32ShruCountHi();
		xorCountHi[0] = local_exports._getI32XorCountHi();
		local_exports._resetInstCounters();	
		
		addCount[0] = addCountHi[0] * 4294967296 + addCountLo[0];
		andCount[0] = andCountHi[0] * 4294967296 + andCountLo[0];
		shlCount[0] = shlCountHi[0] * 4294967296 + shlCountLo[0];
		shrCount[0] = shrCountHi[0] * 4294967296 + shrCountLo[0];
		xorCount[0] = xorCountHi[0] * 4294967296 + xorCountLo[0];
		
		console.log(addCount[0]+","+andCount[0]+","+shlCount[0]+","+shrCount[0]+","+xorCount[0]);
	} else {
		console.log("Profiler not loaded yet");
	}
	
	setTimeout(wasmProfiler, 5000);
}
wasmProfiler();

  (global $addCnt (mut i64) (i64.const 0))
  (global $andCnt (mut i64) (i64.const 0))
  (global $shlCnt (mut i64) (i64.const 0))
  (global $shrCnt (mut i64) (i64.const 0))
  (global $xorCnt (mut i64) (i64.const 0))

  (func $_getI32AddCountLo (type 6) (result i32) 
    (return (i32.wrap/i64 (get_global $addCnt))))
  (func $_getI32AndCountLo (type 6) (result i32)
    (return (i32.wrap/i64 (get_global $andCnt))))
  (func $_getI32ShlCountLo (type 6) (result i32)
    (return (i32.wrap/i64 (get_global $shlCnt))))
  (func $_getI32ShruCountLo (type 6) (result i32)
    (return (i32.wrap/i64 (get_global $shrCnt))))
  (func $_getI32XorCountLo (type 6) (result i32)
    (return (i32.wrap/i64 (get_global $xorCnt))))
  (func $_getI32AddCountHi (type 6) (result i32)
    (return (i32.wrap/i64 (i64.div_s (get_global $addCnt) (i64.const 4294967296)))))
  (func $_getI32AndCountHi (type 6) (result i32)
    (return (i32.wrap/i64 (i64.div_s (get_global $andCnt) (i64.const 4294967296)))))
  (func $_getI32ShlCountHi (type 6) (result i32) 
    (return (i32.wrap/i64 (i64.div_s (get_global $shlCnt) (i64.const 4294967296)))))
  (func $_getI32ShruCountHi (type 6) (result i32) 
    (return (i32.wrap/i64 (i64.div_s (get_global $shrCnt) (i64.const 4294967296)))))
  (func $_getI32XorCountHi (type 6) (result i32) 
    (return (i32.wrap/i64 (i64.div_s (get_global $xorCnt) (i64.const 4294967296)))))
  (func $_resetInstCounters (type 9) 
    (set_global $addCnt (i64.const 0))
	(set_global $andCnt (i64.const 0))
	(set_global $shrCnt (i64.const 0))
	(set_global $shlCnt (i64.const 0))
	(set_global $xorCnt (i64.const 0)))
  
  (export "_getI32AddCountLo" (func $_getI32AddCountLo))
  (export "_getI32AndCountLo" (func $_getI32AndCountLo))
  (export "_getI32ShlCountLo" (func $_getI32ShlCountLo))
  (export "_getI32ShruCountLo" (func $_getI32ShruCountLo))
  (export "_getI32XorCountLo" (func $_getI32XorCountLo))
  (export "_getI32AddCountHi" (func $_getI32AddCountHi))
  (export "_getI32AndCountHi" (func $_getI32AndCountHi))
  (export "_getI32ShlCountHi" (func $_getI32ShlCountHi))
  (export "_getI32ShruCountHi" (func $_getI32ShruCountHi))
  (export "_getI32XorCountHi" (func $_getI32XorCountHi))
  (export "_resetInstCounters" (func $_resetInstCounters))
  
function checkModel(add, and, shl, shr, xor) {
	if (add > 10000000) {
		console.log("Bad behavior detected!!!");
	} 
}

checkModel(addCount[0], andCount[0], shlCount[0], shrCount[0], xorCount[0]);
  
let threshold = 0;
function checkModel(add, and, shl, shr, xor) {
	if (add > 10000000) {
		threshold += 1;
		console.log("Potential bad behavior detected!!!");
		//alert("Bad behavior detected!!!");
	} else {
		threshold = 0;
	}
	if (threshold > 2) {
		alert("Bad behavior detected!!!");
	}
	return;
}

